{"version":3,"sources":["converter/utils.ts","converter/languageSetup.ts","converter/steps.ts","converter/strategy.ts","converter/job.ts","converter/env.ts","converter/cache.ts","converter/converter.ts","converter/prelude.ts","frontend/components/ResultMessagesList.tsx","frontend/components/ResultView.tsx","frontend/components/Header.tsx","frontend/App.tsx","frontend/examples/babelpy.travis.yml.ts","frontend/index.tsx"],"names":["arrayfy","x","defaultValue","undefined","Array","isArray","permutations","choices","callback","prefix","length","c","slice","concat","convertPerLanguageSetup","ctx","travis","matrixAspects","steps","language","python","push","name","uses","with","convertPythonSetup","messages","node_js","type","text","convertNodeSetup","convertJobSteps","env","Object","keys","environmentVariables","fromEntries","map","v","getStepEnvFragment","maybeInjectEnv","step","run","includes","install","forEach","command","script","after_success","expandMatrixIntoIncludes","jobContext","finalMatrixAspects","$env$","environmentVariableCombinations","aspectKeys","aspectValues","values","combo","include","key","index","value","assign","buildStrategy","matrix","convertJob","os","every","e","envStr","vars","split","s","match","exec","convertEnvironmentVariables","cache","directories","path","join","convertCache","strategy","convertToGHA","travisYaml","trim","yaml","safeLoad","github","on","branches","pull_request","jobs","makeContext","sudo","dist","processPrelude","safeDump","remainingTravis","ResultMessagesList","status","ResultView","result","error","direction","flex","margin","as","size","placeholder","readOnly","style","height","Header","align","justify","wrap","padding","bg","color","mr","mt","base","md","border","target","href","App","React","useState","setTravisYaml","conversionResult","useMemo","exc","toString","errorDetail","onClick","onChange","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60878d5e.chunk.js","sourcesContent":["export function arrayfy<T>(\n  x: T | T[] | undefined,\n  defaultValue: readonly T[] = []\n): T[] {\n  if (x === undefined) return [...defaultValue];\n  if (!Array.isArray(x)) return [x];\n  return x;\n}\n\nexport function permutations<T>(\n  choices: readonly T[][],\n  callback: (combo: readonly T[]) => void,\n  prefix: readonly T[] = []\n) {\n  if (!choices.length) {\n    return callback(prefix);\n  }\n  for (var c = 0; c < choices[0].length; c++) {\n    permutations(\n      choices.slice(1),\n      callback,\n      (prefix || []).concat(choices[0][c])\n    );\n  }\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { JobContext } from \"./types\";\nimport { arrayfy } from \"./utils\";\n\nfunction convertPythonSetup(ctx: JobContext) {\n  const { travis, matrixAspects, steps } = ctx;\n  if (travis.language === \"python\" || travis.python) {\n    matrixAspects[\"python-version\"] = arrayfy<string>(travis.python, [\"3.8\"]);\n    steps.push({\n      name: \"Set up Python ${{ matrix.python-version }}\",\n      uses: \"actions/setup-python@v2\",\n      with: {\n        \"python-version\": \"${{ matrix.python-version }}\",\n      },\n    });\n    delete travis.python;\n    delete travis.language;\n  }\n}\n\nfunction convertNodeSetup(ctx: JobContext) {\n  const { travis, messages, steps, matrixAspects } = ctx;\n\n  if (travis.language === \"node_js\" || travis.node_js) {\n    // TODO: parse used versions\n    messages.push({\n      type: \"info\",\n      text:\n        \"Node.js versions are not yet parsed from the Travis configuration.\",\n    });\n    matrixAspects[\"node-version\"] = [\"14.x\"];\n    steps.push({\n      name: \"Set up Node.js ${{ matrix.node-version }}\",\n      uses: \"actions/setup-node@v1\",\n      with: {\n        \"node-version\": \"${{ matrix.node-version }}\",\n      },\n    });\n    delete travis.node_js;\n    delete travis.language;\n  }\n}\n\nexport function convertPerLanguageSetup(ctx: JobContext) {\n  convertPythonSetup(ctx);\n  convertNodeSetup(ctx);\n}\n","import { JobContext } from \"./types\";\nimport { Step } from \"./types/github-workflow\";\nimport { arrayfy } from \"./utils\";\n\nfunction getStepEnvFragment(ctx: JobContext) {\n  if (!Object.keys(ctx.environmentVariables).length) {\n    return undefined;\n  }\n  return Object.fromEntries(\n    Object.keys(ctx.environmentVariables).map((v) => [v, `$\\{{ matrix.${v} }}`])\n  );\n}\n\nexport function convertJobSteps(ctx: JobContext) {\n  const { travis, messages, steps } = ctx;\n  const env = getStepEnvFragment(ctx);\n\n  steps.push({\n    uses: \"actions/checkout@v2\",\n  });\n\n  function maybeInjectEnv(step: Step): Step {\n    // If the step looks like it uses an environment variable, inject all of them into the step\n    if (env && step.run && step.run.includes(\"$\")) {\n      step.env = env;\n    }\n    return step;\n  }\n\n  arrayfy(travis.install).forEach((command) => {\n    steps.push(\n      maybeInjectEnv({\n        run: command,\n      })\n    );\n  });\n  delete travis.install;\n\n  arrayfy(travis.script).forEach((command) => {\n    steps.push(\n      maybeInjectEnv({\n        run: command,\n      })\n    );\n  });\n  delete travis.script;\n  if (travis.after_success) {\n    arrayfy(travis.after_success).forEach((command) => {\n      steps.push(\n        maybeInjectEnv({\n          run: command,\n        })\n      );\n    });\n    messages.push({\n      type: \"warning\",\n      text: \"After-success are concatenated onto regular steps\",\n    });\n    delete travis.after_success;\n  }\n}\n","import { JobContext } from \"./types\";\nimport { Strategy } from \"./types/github-workflow\";\nimport { permutations } from \"./utils\";\n\nfunction expandMatrixIntoIncludes(jobContext: JobContext) {\n  const finalMatrixAspects: Record<string, any[]> = {\n    ...jobContext.matrixAspects,\n    $env$: jobContext.environmentVariableCombinations,\n  };\n  const aspectKeys = Object.keys(finalMatrixAspects);\n  const aspectValues = Object.values(finalMatrixAspects);\n  const includes: any[] = [];\n  permutations(aspectValues, (combo) => {\n    const include: Record<string, string> = {};\n    aspectKeys.forEach((key, index) => {\n      const value = combo[index];\n      if (key === \"$env$\" && typeof value === \"object\") {\n        Object.assign(include, value);\n      } else {\n        include[key] = value;\n      }\n    });\n    includes.push(include);\n  });\n  return includes;\n}\n\nexport function buildStrategy(jobContext: JobContext): Strategy {\n  if (jobContext.environmentVariableCombinations.length) {\n    return {\n      matrix: {\n        include: expandMatrixIntoIncludes(jobContext),\n      },\n    };\n  }\n  return {\n    matrix: {\n      ...jobContext.matrixAspects,\n    },\n  };\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { ConvertContext, JobContext } from \"./types\";\nimport { Job } from \"./types/github-workflow\";\nimport { convertPerLanguageSetup } from \"./languageSetup\";\nimport { convertCache } from \"./cache\";\nimport { convertEnvironmentVariables } from \"./env\";\nimport { convertJobSteps } from \"./steps\";\nimport { buildStrategy } from \"./strategy\";\n\nexport function convertJob(ctx: ConvertContext): Job {\n  const jobContext: JobContext = {\n    ...ctx,\n    steps: [],\n    environmentVariableCombinations: [],\n    environmentVariables: {},\n    matrixAspects: {\n      os: [\"ubuntu-18.04\"],\n    },\n  };\n  convertEnvironmentVariables(jobContext);\n  convertPerLanguageSetup(jobContext);\n  convertCache(jobContext);\n  convertJobSteps(jobContext);\n  return {\n    \"runs-on\": \"${{ matrix.os }}\",\n    strategy: buildStrategy(jobContext),\n    steps: jobContext.steps,\n  };\n}\n","import { JobContext } from \"./types\";\n\nexport function convertEnvironmentVariables(ctx: JobContext) {\n  if (\n    Array.isArray(ctx.travis.env) &&\n    ctx.travis.env.every((e) => typeof e === \"string\")\n  ) {\n    ctx.travis.env.forEach((envStr) => {\n      if (typeof envStr !== \"string\") return;\n      const vars = Object.fromEntries(\n        envStr.split(/\\s+/).map((s) => {\n          const match = /^(.+?)=(.+)$/.exec(s);\n          return match ? [match[1], match[2]] : [s, \"1\"];\n        })\n      );\n      ctx.environmentVariableCombinations.push(vars);\n      Object.keys(vars).forEach((v) => {\n        ctx.environmentVariables[v] = true;\n      });\n    });\n    delete ctx.travis.env;\n  }\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { JobContext } from \"./types\";\nimport { arrayfy } from \"./utils\";\n\nexport function convertCache(ctx: JobContext) {\n  const { travis, steps, messages } = ctx;\n  if (!travis.cache) {\n    return;\n  }\n  if (travis.cache === true) {\n    return;\n  }\n  if (!travis.cache.directories) {\n    return;\n  }\n  steps.push({\n    name: \"Cache multiple paths\",\n    uses: \"actions/cache@v2\",\n    with: {\n      path: arrayfy(travis.cache.directories).join(\"\\n\"),\n      key: \"${{ runner.os }}-${{ hashFiles('TODO') }}\",\n    },\n  });\n  messages.push({\n    type: \"info\",\n    text: \"Please revise the cache key for `actions/cache`.\",\n  });\n  delete travis.cache;\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { safeDump, safeLoad } from \"js-yaml\";\nimport { Travis } from \"./types/travis\";\nimport { ConvertContext, ConvertResult } from \"./types\";\nimport { GithubWorkflow } from \"./types/github-workflow\";\nimport { processPrelude } from \"./prelude\";\nimport { convertJob } from \"./job\";\n\nfunction makeContext(travisYaml: string): ConvertContext {\n  const travis = (safeLoad(travisYaml) as unknown) as Travis;\n  const github: GithubWorkflow = {\n    name: \"Converted Workflow\",\n    on: {\n      push: {\n        branches: [\"master\"],\n      },\n      pull_request: {\n        branches: [\"master\"],\n      },\n    },\n    jobs: {},\n  };\n  return { travis, messages: [], github };\n}\n\nexport function convertToGHA(travisYaml: string): ConvertResult {\n  travisYaml = travisYaml.trim();\n  if (!travisYaml.length) {\n    return { yaml: \"\", messages: [] };\n  }\n  const ctx = makeContext(travisYaml);\n  const { travis, messages, github } = ctx;\n  processPrelude(ctx);\n  github.jobs[\"Build\"] = convertJob(ctx);\n\n  return {\n    yaml: safeDump(github),\n    messages,\n    remainingTravis:\n      travis && Object.keys(travis).length ? safeDump(travis) : undefined,\n  };\n}\n","import { ConvertContext } from \"./types\";\n\nexport function processPrelude(ctx: ConvertContext) {\n  const { travis, messages } = ctx;\n  if (travis.sudo) {\n    messages.push({ type: \"info\", text: \"Ignoring `sudo`\" });\n  }\n  delete travis.sudo;\n  if (travis.dist) {\n    messages.push({ type: \"info\", text: \"Ignoring `dist`\" });\n  }\n  delete travis.dist;\n}\n","import { ConvertMessage } from \"../../converter/types\";\nimport { Alert, AlertDescription, AlertIcon } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport function ResultMessagesList({\n  messages,\n}: {\n  messages: ConvertMessage[];\n}) {\n  if (!messages.length) return null;\n  return (\n    <div>\n      {messages.map(({ type, text }, index) => (\n        <Alert status={type} key={`${text} ${index}`}>\n          <AlertIcon />\n          <AlertDescription>{text}</AlertDescription>\n        </Alert>\n      ))}\n    </div>\n  );\n}\n","import { ConvertResult } from \"../../converter/types\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Flex,\n  Heading,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { ResultMessagesList } from \"./ResultMessagesList\";\nimport React from \"react\";\n\nexport function ResultView({ result }: { result: ConvertResult }) {\n  if (result && result.error) {\n    return (\n      <div>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertDescription>\n            Conversion failed: ${result.error}\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Flex direction=\"column\" flex={1} margin={2}>\n        <Heading as=\"h4\" size=\"md\">\n          GitHub Actions YAML\n        </Heading>\n        <Textarea\n          placeholder=\"GitHub Actions YAML will appear here\"\n          readOnly\n          value={result.yaml}\n          style={{ height: \"auto\" }}\n          flex={1}\n        />\n        <ResultMessagesList messages={result.messages} />\n      </Flex>\n      {result.remainingTravis ? (\n        <Flex direction=\"column\" flex={1} margin={2}>\n          <Heading as=\"h4\" size=\"md\">\n            Unconverted Travis configuration\n          </Heading>\n          <Alert status=\"info\">\n            <AlertIcon />\n            <AlertDescription>\n              The app doesn't yet know how to handle whatever remains in this\n              box.\n              <br />\n              If you can help, please open a PR on GitHub ☝️\n            </AlertDescription>\n          </Alert>\n          <Textarea\n            placeholder=\"GitHub Actions YAML will appear here\"\n            readOnly\n            value={result.remainingTravis}\n            style={{ height: \"auto\" }}\n            flex={1}\n          />\n        </Flex>\n      ) : null}\n    </>\n  );\n}\n","import { Box, Button, Flex, Heading } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nconst Header = () => (\n  <Flex\n    as=\"nav\"\n    align=\"center\"\n    justify=\"space-between\"\n    wrap=\"wrap\"\n    padding=\"1.5rem\"\n    bg=\"blue.500\"\n    color=\"white\"\n  >\n    {\" \"}\n    <Flex align=\"center\" mr={5}>\n      <Heading as=\"h1\" size=\"lg\">\n        Travis to GitHub Actions converter\n      </Heading>\n    </Flex>\n    <Box mt={{ base: 4, md: 0 }}>\n      <Button\n        bg=\"transparent\"\n        border=\"1px\"\n        as=\"a\"\n        target=\"_blank\"\n        href=\"https://github.com/akx/travis-to-github-actions\"\n      >\n        Contribute on GitHub\n      </Button>\n    </Box>\n  </Flex>\n);\nexport default Header;\n","import { Flex, Heading, Textarea } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { convertToGHA } from \"../converter/converter\";\nimport { ResultView } from \"./components/ResultView\";\nimport Header from \"./components/Header\";\nimport babelPyExample from \"./examples/babelpy.travis.yml\";\n\nfunction useTravisConversion(yaml: string) {\n  return React.useMemo(() => {\n    try {\n      return convertToGHA(yaml);\n    } catch (exc) {\n      return {\n        yaml: \"\",\n        messages: [],\n        error: exc.toString(),\n        errorDetail: exc,\n      };\n    }\n  }, [yaml]);\n}\n\nfunction App() {\n  const [travisYaml, setTravisYaml] = React.useState(\"\");\n  const conversionResult = useTravisConversion(travisYaml);\n  return (\n    <Flex direction=\"column\" flex={1}>\n      <Header />\n      <Flex padding={5} flex={1}>\n        <Flex flex={2} direction=\"column\" margin={2}>\n          <Flex justify=\"space-between\">\n            <Heading as=\"h4\" size=\"md\">\n              Input Travis.yml\n            </Heading>\n            {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n            <a href=\"#\" onClick={() => setTravisYaml(babelPyExample)}>\n              Load example\n            </a>\n          </Flex>\n          <Textarea\n            placeholder=\"Paste a travis.yml here\"\n            value={travisYaml}\n            onChange={(e) => setTravisYaml(e.target.value)}\n            style={{ height: \"auto\" }}\n            flex={1}\n          />\n        </Flex>\n        <Flex flex={3} direction=\"row\">\n          <ResultView result={conversionResult} />\n        </Flex>\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n","// eslint-disable-next-line no-template-curly-in-string\nconst content =\n  'dist: xenial\\nlanguage: python\\n\\n# Use travis docker infrastructure for greater speed\\nsudo: false\\n\\ncache:\\n  directories:\\n  - cldr\\n  - \"$HOME/.cache/pip\"\\n  - \"$HOME/.pyenv\"\\n\\nmatrix:\\n  include:\\n    - os: linux\\n      python: 2.7\\n      env:\\n      - PYTEST_VERSION=4.3.1\\n    - os: linux\\n      python: 2.7\\n      env:\\n      - CDECIMAL=m3-cdecimal\\n      - PYTEST_VERSION=4.3.1\\n    - os: linux\\n      dist: trusty\\n      python: pypy\\n      env:\\n      - PYTEST_VERSION=4.3.1\\n    - os: linux\\n      dist: trusty\\n      python: pypy3\\n      env:\\n      - PYTEST_VERSION=6.1.2\\n    - os: linux\\n      python: 3.4\\n      env:\\n      - PYTEST_VERSION=4.3.1\\n    - os: linux\\n      python: 3.5\\n      env:\\n      - PYTHON_TEST_FLAGS=-bb\\n      - PYTEST_VERSION=6.1.2\\n    - os: linux\\n      python: 3.6\\n      env:\\n      - PYTEST_VERSION=6.1.2\\n    - os: linux\\n      python: 3.7\\n      env:\\n      - PYTEST_VERSION=6.1.2\\n    - os: linux\\n      python: 3.8\\n      env:\\n      - PYTEST_VERSION=6.1.2\\n\\ninstall:\\n  - bash .ci/deps.${TRAVIS_OS_NAME}.sh\\n  - pip install --upgrade pip\\n  - pip install --upgrade $CDECIMAL pytest==$PYTEST_VERSION pytest-cov freezegun==0.3.12\\n  - pip install --editable .\\n\\nscript:\\n  - make test-cov\\n  - bash .ci/deploy.${TRAVIS_OS_NAME}.sh\\n\\nnotifications:\\n  email: false\\n  irc:\\n    channels:\\n      - \"chat.freenode.net#pocoo\"\\n    on_success: change\\n    on_failure: always\\n    use_notice: true\\n    skip_join: true';\nexport default content;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
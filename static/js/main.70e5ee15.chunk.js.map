{"version":3,"sources":["utils.ts","converter/job.ts","converter/languageSetup.ts","converter/cache.ts","converter/converter.ts","converter/prelude.ts","components/ResultMessagesList.tsx","components/ResultView.tsx","App.tsx","index.tsx"],"names":["arrayfy","x","undefined","Array","isArray","convertJob","ctx","job","strategy","matrix","os","exclude","steps","uses","travis","messages","language","python","push","type","text","name","with","convertPythonSetup","node_js","convertNodeSetup","convertPerLanguageSetup","cache","directories","path","join","key","convertCache","install","forEach","command","run","script","after_success","convertJobSteps","convertToGHA","travisYaml","trim","length","yaml","safeLoad","github","on","branches","pull_request","jobs","makeContext","sudo","dist","processPrelude","safeDump","remainingTravis","Object","keys","ResultMessagesList","map","status","ResultView","result","error","direction","flex","margin","as","size","placeholder","readOnly","value","style","height","App","React","useState","setTravisYaml","conversionResult","useMemo","exc","toString","errorDetail","padding","onChange","e","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.70e5ee15.chunk.js","sourcesContent":["export function arrayfy<T>(x: T | T[] | undefined): T[] {\n  if (x === undefined) return [];\n  if (!Array.isArray(x)) return [x];\n  return x;\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { ConvertContext } from \"./types\";\nimport { Job } from \"../types/github-workflow\";\nimport { convertPerLanguageSetup } from \"./languageSetup\";\nimport { arrayfy } from \"../utils\";\nimport { convertCache } from \"./cache\";\n\nfunction convertJobSteps(ctx: ConvertContext, job: Job) {\n  const { travis, messages } = ctx;\n  const { steps } = job;\n  arrayfy(travis.install).forEach((command) => {\n    steps.push({\n      run: command,\n    });\n  });\n  delete travis.install;\n\n  arrayfy(travis.script).forEach((command) => {\n    steps.push({\n      run: command,\n    });\n  });\n  delete travis.script;\n  if (travis.after_success) {\n    arrayfy(travis.after_success).forEach((command) => {\n      steps.push({\n        run: command,\n      });\n    });\n    messages.push({\n      type: \"warning\",\n      text: \"After-success are concatenated onto regular steps\",\n    });\n    delete travis.after_success;\n  }\n}\n\nexport function convertJob(ctx: ConvertContext): Job {\n  const job: Job = {\n    \"runs-on\": \"${{ matrix.os }}\",\n    strategy: {\n      matrix: {\n        os: [\"ubuntu-18.04\"],\n        exclude: [],\n      },\n    },\n    steps: [\n      {\n        uses: \"actions/checkout@v2\",\n      },\n    ],\n  };\n  convertPerLanguageSetup(ctx, job);\n  convertCache(ctx, job);\n  convertJobSteps(ctx, job);\n  return job;\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { ConvertContext } from \"./types\";\nimport { Job } from \"../types/github-workflow\";\n\nfunction convertPythonSetup(ctx: ConvertContext, job: Job) {\n  const { travis, messages } = ctx;\n  if (travis.language === \"python\" || travis.python) {\n    // TODO: parse used versions\n    messages.push({\n      type: \"info\",\n      text: \"Python versions are not yet parsed from the Travis configuration.\",\n    });\n    job.strategy.matrix[\"python-version\"] = [\"3.8\"];\n    job.steps.push({\n      name: \"Set up Python ${{ matrix.python-version }}\",\n      uses: \"actions/setup-python@v2\",\n      with: {\n        \"python-version\": \"${{ matrix.python-version }}\",\n      },\n    });\n    delete travis.python;\n    delete travis.language;\n  }\n}\n\nfunction convertNodeSetup(ctx: ConvertContext, job: Job) {\n  const { travis, messages } = ctx;\n\n  if (travis.language === \"node_js\" || travis.node_js) {\n    // TODO: parse used versions\n    messages.push({\n      type: \"info\",\n      text:\n        \"Node.js versions are not yet parsed from the Travis configuration.\",\n    });\n    job.strategy.matrix[\"node-version\"] = [\"14.x\"];\n    job.steps.push({\n      name: \"Set up Node.js ${{ matrix.node-version }}\",\n      uses: \"actions/setup-node@v1\",\n      with: {\n        \"node-version\": \"${{ matrix.node-version }}\",\n      },\n    });\n    delete travis.node_js;\n    delete travis.language;\n  }\n}\n\nexport function convertPerLanguageSetup(ctx: ConvertContext, job: Job) {\n  convertPythonSetup(ctx, job);\n  convertNodeSetup(ctx, job);\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { ConvertContext } from \"./types\";\nimport { Job } from \"../types/github-workflow\";\nimport { arrayfy } from \"../utils\";\n\nexport function convertCache(ctx: ConvertContext, job: Job) {\n  if (!ctx.travis.cache) {\n    return;\n  }\n  if (ctx.travis.cache === true) {\n    return;\n  }\n  if (!ctx.travis.cache.directories) {\n    return;\n  }\n  job.steps.push({\n    name: \"Cache multiple paths\",\n    uses: \"actions/cache@v2\",\n    with: {\n      path: arrayfy(ctx.travis.cache.directories).join(\"\\n\"),\n      key: \"${{ runner.os }}-${{ hashFiles('TODO') }}\",\n    },\n  });\n  ctx.messages.push({\n    type: \"info\",\n    text: \"Please revise the cache key for `actions/cache`.\",\n  });\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { safeDump, safeLoad } from \"js-yaml\";\nimport { Travis } from \"../types/travis\";\nimport { ConvertContext, ConvertResult } from \"./types\";\nimport { GithubWorkflow } from \"../types/github-workflow\";\nimport { processPrelude } from \"./prelude\";\nimport { convertJob } from \"./job\";\n\nfunction makeContext(travisYaml: string): ConvertContext {\n  const travis = (safeLoad(travisYaml) as unknown) as Travis;\n  const github: GithubWorkflow = {\n    name: \"Converted Workflow\",\n    on: {\n      push: {\n        branches: [\"master\"],\n      },\n      pull_request: {\n        branches: [\"master\"],\n      },\n    },\n    jobs: {},\n  };\n  return { travis, messages: [], github };\n}\n\nexport function convertToGHA(travisYaml: string): ConvertResult {\n  travisYaml = travisYaml.trim();\n  if (!travisYaml.length) {\n    return { yaml: \"\", messages: [] };\n  }\n  const ctx = makeContext(travisYaml);\n  const { travis, messages, github } = ctx;\n  processPrelude(ctx);\n  (github.jobs as any)[\"Build\"] = convertJob(ctx);\n\n  return {\n    yaml: safeDump(github),\n    messages,\n    remainingTravis:\n      travis && Object.keys(travis).length ? safeDump(travis) : undefined,\n  };\n}\n","import { ConvertContext } from \"./types\";\n\nexport function processPrelude(ctx: ConvertContext) {\n  const { travis, messages } = ctx;\n  if (travis.sudo) {\n    messages.push({ type: \"info\", text: \"Ignoring `sudo`\" });\n  }\n  delete travis.sudo;\n  if (travis.dist) {\n    messages.push({ type: \"info\", text: \"Ignoring `dist`\" });\n  }\n  delete travis.dist;\n}\n","import { ConvertMessage } from \"../converter/types\";\nimport { Alert, AlertDescription, AlertIcon } from \"@chakra-ui/react\";\nimport React from \"react\";\n\nexport function ResultMessagesList({\n  messages,\n}: {\n  messages: ConvertMessage[];\n}) {\n  if (!messages.length) return null;\n  return (\n    <div>\n      {messages.map(({ type, text }) => (\n        <Alert status={type}>\n          <AlertIcon />\n          <AlertDescription>{text}</AlertDescription>\n        </Alert>\n      ))}\n    </div>\n  );\n}\n","import { ConvertResult } from \"../converter/types\";\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  Flex,\n  Heading,\n  Textarea,\n} from \"@chakra-ui/react\";\nimport { ResultMessagesList } from \"./ResultMessagesList\";\nimport React from \"react\";\n\nexport function ResultView({ result }: { result: ConvertResult }) {\n  if (result && result.error) {\n    return (\n      <div>\n        <Alert status=\"error\">\n          <AlertIcon />\n          <AlertDescription>\n            Conversion failed: ${result.error}\n          </AlertDescription>\n        </Alert>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      <Flex direction=\"column\" flex={1} margin={2}>\n        <Heading as=\"h4\" size=\"md\">\n          GitHub Actions YAML\n        </Heading>\n        <Textarea\n          placeholder=\"GitHub Actions YAML will appear here\"\n          readOnly\n          value={result.yaml}\n          style={{ height: \"auto\" }}\n          flex={1}\n        />\n        <ResultMessagesList messages={result.messages} />\n      </Flex>\n      {result.remainingTravis ? (\n        <Flex direction=\"column\" flex={1} margin={2}>\n          <Heading as=\"h4\" size=\"md\">\n            Unconverted Travis configuration\n          </Heading>\n          <Alert status=\"info\">\n            <AlertIcon />\n            <AlertDescription>\n              The app doesn't yet know how to handle whatever remains in this\n              box.\n            </AlertDescription>\n          </Alert>\n          <Textarea\n            placeholder=\"GitHub Actions YAML will appear here\"\n            readOnly\n            value={result.remainingTravis}\n            style={{ height: \"auto\" }}\n            flex={1}\n          />\n        </Flex>\n      ) : null}\n    </>\n  );\n}\n","import { Flex, Heading, Textarea } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport \"./App.css\";\nimport { convertToGHA } from \"./converter/converter\";\nimport { ConvertResult } from \"./converter/types\";\nimport { ResultView } from \"./components/ResultView\";\n\nfunction useTravisConversion(yaml: string): ConvertResult {\n  return React.useMemo(() => {\n    try {\n      return convertToGHA(yaml);\n    } catch (exc) {\n      return {\n        yaml: \"\",\n        messages: [],\n        error: exc.toString(),\n        errorDetail: exc,\n      };\n    }\n  }, [yaml]);\n}\n\nfunction App() {\n  const [travisYaml, setTravisYaml] = React.useState(\"\");\n  const conversionResult = useTravisConversion(travisYaml);\n  return (\n    <Flex padding={5} flex={1}>\n      <Flex flex={2} direction=\"column\" margin={2}>\n        <Heading as=\"h4\" size=\"md\">\n          Input Travis.yml\n        </Heading>\n        <Textarea\n          placeholder=\"Paste a travis.yml here\"\n          value={travisYaml}\n          onChange={(e) => setTravisYaml(e.target.value)}\n          style={{ height: \"auto\" }}\n          flex={1}\n        />\n      </Flex>\n      <Flex flex={3} direction=\"row\">\n        <ResultView result={conversionResult} />\n      </Flex>\n    </Flex>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}